' Copyright (C) 2019 - present Juergen Zimmermann, Hochschule Karlsruhe
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <https://www.gnu.org/licenses/>.

' Preview durch <Alt>d

@startuml Controller-Klasse

interface Promise<T>

package @nestjs/common {
  class "@Controller" as Controller
  hide Controller circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Post" as Post
  hide Post circle

  class "@Put" as Put
  hide Put circle

  class "@Delete" as Delete
  hide Delete circle

  class "@Req" as Req
  hide Req circle

  class "@Res" as Res
  hide Res circle

  class "@Param" as Param
  hide Param circle

  class "@Body" as Body
  hide Body circle

  class "@Headers" as Headers
  hide Headers circle

  UseInterceptors .[hidden].> Post
  UseInterceptors .[hidden].> Put
  UseInterceptors .[hidden].> Delete

  Post .[hidden].> Req
  Post .[hidden].> Res
  Post .[hidden].> Param
  Post .[hidden].> Body
  Post .[hidden].> Headers
}

package nest-keycloak-connect {
  class AuthGuard

  class "@Roles" as Roles
  hide Roles circle
}

package express {
  class Request
  class Response

  Response .right[hidden].> Controller
}

package student {
  package entity #FFFFFF {
    class Student <<entity>>

    Student .[hidden].> Promise
    Student .[hidden].> Request
  }

  package service {
    class StudentWriteService << control >>
    class StudentReadService << control >>
  }

  package rest #DDDDDD {
    class StudentWriteController << control >> << @Controller() >> << @UseGuards() >> << @UseInterceptors() >> {
      + @Post() @Roles() async post(@Body() student: Student, @Req() req: Request,  @Res() res: Response): Promise<Response>
      + @Put() @Roles() async put(@Body() student: Student, @Param() id: number, @Headers() version: string, @Res() res: Response): Promise<Response>
      + @Delete() @Roles() async delete(@Param() id: number, @Res() res: Response): Promise<Response>
    }

    StudentWriteController o--> "1" StudentWriteService : service
    StudentWriteController o--> "1" StudentReadService : readService
    StudentWriteController ..up> Student

    StudentWriteController ..> Controller

    StudentWriteController .up.> AuthGuard
    StudentWriteController .up.> Roles

    StudentWriteController ..> Request
    StudentWriteController ..> Response
    StudentWriteController ..> Promise

    Student .up[hidden].> Roles
    StudentWriteService .[hidden].> Request
    StudentWriteService .[hidden].> Promise
  }
}

hide empty members

@enduml
